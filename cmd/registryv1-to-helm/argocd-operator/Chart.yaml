annotations:
  alm-examples: |-
    [
      {
        "apiVersion": "argoproj.io/v1alpha1",
        "kind": "AppProject",
        "metadata": {
          "name": "example"
        },
        "spec": null
      },
      {
        "apiVersion": "argoproj.io/v1alpha1",
        "kind": "Application",
        "metadata": {
          "name": "example"
        },
        "spec": null
      },
      {
        "apiVersion": "argoproj.io/v1alpha1",
        "kind": "ApplicationSet",
        "metadata": {
          "name": "example"
        },
        "spec": null
      },
      {
        "apiVersion": "argoproj.io/v1alpha1",
        "kind": "ArgoCD",
        "metadata": {
          "name": "argocd-sample"
        },
        "spec": {
          "controller": {
            "resources": {
              "limits": {
                "cpu": "2000m",
                "memory": "2048Mi"
              },
              "requests": {
                "cpu": "250m",
                "memory": "1024Mi"
              }
            }
          },
          "ha": {
            "enabled": false,
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "250m",
                "memory": "128Mi"
              }
            }
          },
          "redis": {
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "250m",
                "memory": "128Mi"
              }
            }
          },
          "repo": {
            "resources": {
              "limits": {
                "cpu": "1000m",
                "memory": "512Mi"
              },
              "requests": {
                "cpu": "250m",
                "memory": "256Mi"
              }
            }
          },
          "server": {
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "256Mi"
              },
              "requests": {
                "cpu": "125m",
                "memory": "128Mi"
              }
            },
            "route": {
              "enabled": true
            }
          },
          "sso": {
            "dex": {
              "resources": {
                "limits": {
                  "cpu": "500m",
                  "memory": "256Mi"
                },
                "requests": {
                  "cpu": "250m",
                  "memory": "128Mi"
                }
              }
            },
            "provider": "dex"
          }
        }
      },
      {
        "apiVersion": "argoproj.io/v1alpha1",
        "kind": "ArgoCDExport",
        "metadata": {
          "name": "argocdexport-sample"
        },
        "spec": {
          "argocd": "argocd-sample"
        }
      }
    ]
  capabilities: Deep Insights
  categories: Integration & Delivery
  certified: "false"
  containerImage: quay.io/argoprojlabs/argocd-operator@sha256:99aeec24cc406d06d18822347d9ac3ed053a702d8419191e4e681075fed7b9bb
  description: Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.
  operators.operatorframework.io/builder: operator-sdk-v1.10.0+git
  operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
  repository: https://github.com/argoproj-labs/argocd-operator
  support: Argo CD
apiVersion: v2
description: |
  ## Overview

  The Argo CD Operator manages the full lifecycle for [Argo CD](https://argoproj.github.io/argo-cd/) and it's
  components. The operator's goal is to automate the tasks required when operating an Argo CD cluster.

  Beyond installation, the operator helps to automate the process of upgrading, backing up and restoring as needed and
  remove the human as much as possible. In addition, the operator aims to provide deep insights into the Argo CD
  environment by configuring Prometheus and Grafana to aggregate, visualize and expose the metrics already exported by
  Argo CD.

  The operator aims to provide the following, and is a work in progress.

  * Easy configuration and installation of the Argo CD components with sane defaults to get up and running quickly.
  * Provide seamless upgrades to the Argo CD components.
  * Ability to back up and restore an Argo CD cluster from a point in time or on a recurring schedule.
  * Aggregate and expose the metrics for Argo CD and the operator itself using Prometheus and Grafana.
  * Autoscale the Argo CD components as necessary to handle variability in demand.

  ## Usage

  Deploy a basic Argo CD cluster by creating a new ArgoCD resource in the namespace where the operator is installed.

  ```
  apiVersion: argoproj.io/v1alpha1
  kind: ArgoCD
  metadata:
    name: example-argocd
  spec: {}
  ```

  ## Backup

  Backup the cluster above by creating a new ArgoCDExport resource in the namespace where the operator is installed.

  ```
  apiVersion: argoproj.io/v1alpha1
  kind: ArgoCDExport
  metadata:
    name: example-argocdexport
  spec:
    argocd: example-argocd
  ```

  See the [documentation](https://argocd-operator.readthedocs.io) and examples on
  [github](https://github.com/argoproj-labs/argocd-operator) for more information.
keywords:
- gitops
- kubernetes
maintainers:
- email: aveerama@redhat.com
  name: Abhishek Veeramalla
name: argocd-operator
version: 0.6.0
